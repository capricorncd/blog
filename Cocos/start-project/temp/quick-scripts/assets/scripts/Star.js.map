{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","start","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAJE,KAHP;;AAaL;;AAEA;;AAEAC,SAjBK,mBAiBI,CAER,CAnBI;AAqBLC,qBArBK,+BAqBgB;AACjB;AACA,YAAIC,YAAY,KAAKL,IAAL,CAAUM,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAOd,GAAGe,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KA3BI;AA6BLI,YA7BK,sBA6BO;AACR;AACA,aAAKZ,IAAL,CAAUa,YAAV;AACA;AACA,aAAKb,IAAL,CAAUc,SAAV;AACA;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACH,KApCI;AAsCLC,UAtCK,kBAsCGC,EAtCH,EAsCO;AACR;AACA,YAAI,KAAKb,iBAAL,KAA2B,KAAKL,UAApC,EAAgD;AAC5C;AACA,iBAAKa,QAAL;AACA;AACH;AACD;AACA,YAAIM,eAAe,IAAI,KAAKlB,IAAL,CAAUmB,KAAV,GAAkB,KAAKnB,IAAL,CAAUoB,YAAnD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKX,IAAL,CAAUY,OAAV,GAAoBD,aAAaE,KAAKC,KAAL,CAAWN,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AAjDI,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n        pickRadius: 0,\r\n        // 暂存 Game 对象的引用\r\n        game: {\r\n            default: null,\r\n            serializable: false\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    getPlayerDistance () {\r\n        // 根据 player 节点位置判断距离\r\n        let playerPos = this.game.player.getPosition()\r\n        // 根据两点位置计算两点之间距离\r\n        let dist = cc.pDistance(this.node.position, playerPos)\r\n        return dist\r\n    },\r\n\r\n    onPicked () {\r\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n        this.game.spawnNewStar()\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore()\r\n        // 然后销毁当前星星节点\r\n        this.node.destroy()\r\n    },\r\n\r\n    update (dt) {\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked()\r\n            return\r\n        }\r\n        // 根据 Game 脚本中的计时器更新星星的透明度\r\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration\r\n        var minOpacity = 50\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity))\r\n    }\r\n});\r\n"]}